name: React CI/CD

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - 'README.md'

env:
  NODE_VERSION: '20.1.0'
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  IMAGE_NAME: 'main'
  AWS_SSH_PRIVATE_KEY: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
  LIGHTSAIL_IP: ${{ secrets.LIGHTSAIL_IP }}

jobs:
  buildAndTest:
    name: Build and Run Tests
    runs-on: ubuntu-22.04

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      - name: Get the git version
        run: echo "GIT_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV

#      - name: Create application.properties
#          run:
#            echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties
#
#      - name: Create container resources required by hermes-producer
#        run:
#          docker compose -f docker/local/docker-compose.yaml up -d

      - name: Build and Test with Node
        run: |
          docker run --network host \
                     --rm --mount type=bind,source=$GITHUB_WORKSPACE,target=/usr/src/app \
                     -w /usr/src/app node:${{ env.NODE_VERSION }} \
                     bash -c "npm install && npm test && npm run build"

#       - name: Upload test results
#         if: always()
#         uses: actions/upload-artifact@v3
#         with:
#             name: test-results
#             path: '**/TEST-*.xml'



#     publishTestResults:
#       name: Publish Test Results
#       runs-on: ubuntu-22.04

#       needs: [ buildAndTest ]
#       if:
#         always()

#       steps:
#         - name: Check out the current branch
#           uses: actions/checkout@v3

#         - name: Download test results
#           uses: actions/download-artifact@v3
#           with:
#             name: test-results

#         - name: Display test results summary
#           uses: dorny/test-reporter@v1.6.0
#           with:
#             name: Test Results
#             path: '**/TEST-*.xml'
#             reporter: Mocha


  buildAndPush:
    name: Build and Push the Image
    runs-on: ubuntu-22.04

    needs: [ buildAndTest ]
    if: >
      (github.ref == 'refs/heads/master' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged)

    steps:
      - name: Check out the current branch
        uses: actions/checkout@v3

      - name: Get the git version
        run: echo "GIT_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV

      - name: Build with Gradle
        run: |
          docker run --network host \
                   --rm --mount type=bind,source=$GITHUB_WORKSPACE,target=/usr/src/app \
                   -w /usr/src/app node:${{ env.NODE_VERSION }} \
                   bash -c "npm install && npm test && npm run build"

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/pipeline/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.DOCKER_HUB_PASSWORD }}/${{ env.IMAGE_NAME }}:${{ env.GIT_VERSION }}
                       

  deploy:
    name: Deploy the Latest Image
    runs-on: ubuntu-22.04

    needs: [ buildAndPush ]

    steps:
      - name: Deploy to AWS Lightsail
        run: |
          echo "${{ env.AWS_SSH_PRIVATE_KEY }}" > my_key.pem
          chmod 600 my_key.pem
          ssh -o StrictHostKeyChecking=no -i my_key.pem ubuntu@${{ env.LIGHTSAIL_IP }} '
            docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest &&
            docker rm -f ${{ env.IMAGE_NAME }} || true &&
            docker run -d --name ${{ env.IMAGE_NAME }} \
                       ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            docker image prune -a -f
